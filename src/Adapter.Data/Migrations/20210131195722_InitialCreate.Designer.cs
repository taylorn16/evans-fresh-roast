// <auto-generated />
using System;
using Adapter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Adapter.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210131195722_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Adapter.Data.Models.Coffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OzWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Coffee");
                });

            modelBuilder.Entity("Adapter.Data.Models.CoffeeRoastingEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoffeeRoastingEvents");
                });

            modelBuilder.Entity("Adapter.Data.Models.CoffeeRoastingEventCoffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoffeeRoastingEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("CoffeeRoastingEventId");

                    b.ToTable("CoffeeRoastingEventCoffee");
                });

            modelBuilder.Entity("Adapter.Data.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoffeeRoastingEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeRoastingEventId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Adapter.Data.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Adapter.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoffeeRoastingEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeRoastingEventId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Adapter.Data.Models.OrderCoffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCoffee");
                });

            modelBuilder.Entity("Adapter.Data.Models.CoffeeRoastingEventCoffee", b =>
                {
                    b.HasOne("Adapter.Data.Models.Coffee", "Coffee")
                        .WithMany("CoffeeRoastingEventCoffees")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adapter.Data.Models.CoffeeRoastingEvent", "CoffeeRoastingEvent")
                        .WithMany("CoffeeRoastingEventCoffees")
                        .HasForeignKey("CoffeeRoastingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("CoffeeRoastingEvent");
                });

            modelBuilder.Entity("Adapter.Data.Models.Contact", b =>
                {
                    b.HasOne("Adapter.Data.Models.CoffeeRoastingEvent", null)
                        .WithMany("Contacts")
                        .HasForeignKey("CoffeeRoastingEventId");
                });

            modelBuilder.Entity("Adapter.Data.Models.Invoice", b =>
                {
                    b.HasOne("Adapter.Data.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("Adapter.Data.Models.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Adapter.Data.Models.Order", b =>
                {
                    b.HasOne("Adapter.Data.Models.CoffeeRoastingEvent", null)
                        .WithMany("Orders")
                        .HasForeignKey("CoffeeRoastingEventId");
                });

            modelBuilder.Entity("Adapter.Data.Models.OrderCoffee", b =>
                {
                    b.HasOne("Adapter.Data.Models.Coffee", "Coffee")
                        .WithMany("OrderCoffees")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adapter.Data.Models.Order", "Order")
                        .WithMany("OrderCoffees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Adapter.Data.Models.Coffee", b =>
                {
                    b.Navigation("CoffeeRoastingEventCoffees");

                    b.Navigation("OrderCoffees");
                });

            modelBuilder.Entity("Adapter.Data.Models.CoffeeRoastingEvent", b =>
                {
                    b.Navigation("CoffeeRoastingEventCoffees");

                    b.Navigation("Contacts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Adapter.Data.Models.Order", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("OrderCoffees");
                });
#pragma warning restore 612, 618
        }
    }
}
